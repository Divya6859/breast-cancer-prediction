{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMCA0PxSf9XhNmHvg7CuJKu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Divya6859/breast-cancer-prediction/blob/main/BreastCancerPrediction.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import Libraries"
      ],
      "metadata": {
        "id": "SbC6d2MLKm49"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SRQS7IbhIOZ6"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import  LabelEncoder, StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Load Dataset"
      ],
      "metadata": {
        "id": "ZxXF3fQPLNVk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/data.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "XHeBvX7JKmGN",
        "outputId": "977a03d1-9cf8-4acf-e911-a7331dc07cc8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
              "0      842302         M        17.99         10.38          122.80     1001.0   \n",
              "1      842517         M        20.57         17.77          132.90     1326.0   \n",
              "2    84300903         M        19.69         21.25          130.00     1203.0   \n",
              "3    84348301         M        11.42         20.38           77.58      386.1   \n",
              "4    84358402         M        20.29         14.34          135.10     1297.0   \n",
              "..        ...       ...          ...           ...             ...        ...   \n",
              "564    926424         M        21.56         22.39          142.00     1479.0   \n",
              "565    926682         M        20.13         28.25          131.20     1261.0   \n",
              "566    926954         M        16.60         28.08          108.30      858.1   \n",
              "567    927241         M        20.60         29.33          140.10     1265.0   \n",
              "568     92751         B         7.76         24.54           47.92      181.0   \n",
              "\n",
              "     smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "0            0.11840           0.27760         0.30010              0.14710   \n",
              "1            0.08474           0.07864         0.08690              0.07017   \n",
              "2            0.10960           0.15990         0.19740              0.12790   \n",
              "3            0.14250           0.28390         0.24140              0.10520   \n",
              "4            0.10030           0.13280         0.19800              0.10430   \n",
              "..               ...               ...             ...                  ...   \n",
              "564          0.11100           0.11590         0.24390              0.13890   \n",
              "565          0.09780           0.10340         0.14400              0.09791   \n",
              "566          0.08455           0.10230         0.09251              0.05302   \n",
              "567          0.11780           0.27700         0.35140              0.15200   \n",
              "568          0.05263           0.04362         0.00000              0.00000   \n",
              "\n",
              "     ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",
              "0    ...          17.33           184.60      2019.0           0.16220   \n",
              "1    ...          23.41           158.80      1956.0           0.12380   \n",
              "2    ...          25.53           152.50      1709.0           0.14440   \n",
              "3    ...          26.50            98.87       567.7           0.20980   \n",
              "4    ...          16.67           152.20      1575.0           0.13740   \n",
              "..   ...            ...              ...         ...               ...   \n",
              "564  ...          26.40           166.10      2027.0           0.14100   \n",
              "565  ...          38.25           155.00      1731.0           0.11660   \n",
              "566  ...          34.12           126.70      1124.0           0.11390   \n",
              "567  ...          39.42           184.60      1821.0           0.16500   \n",
              "568  ...          30.37            59.16       268.6           0.08996   \n",
              "\n",
              "     compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",
              "0              0.66560           0.7119                0.2654          0.4601   \n",
              "1              0.18660           0.2416                0.1860          0.2750   \n",
              "2              0.42450           0.4504                0.2430          0.3613   \n",
              "3              0.86630           0.6869                0.2575          0.6638   \n",
              "4              0.20500           0.4000                0.1625          0.2364   \n",
              "..                 ...              ...                   ...             ...   \n",
              "564            0.21130           0.4107                0.2216          0.2060   \n",
              "565            0.19220           0.3215                0.1628          0.2572   \n",
              "566            0.30940           0.3403                0.1418          0.2218   \n",
              "567            0.86810           0.9387                0.2650          0.4087   \n",
              "568            0.06444           0.0000                0.0000          0.2871   \n",
              "\n",
              "     fractal_dimension_worst  Unnamed: 32  \n",
              "0                    0.11890          NaN  \n",
              "1                    0.08902          NaN  \n",
              "2                    0.08758          NaN  \n",
              "3                    0.17300          NaN  \n",
              "4                    0.07678          NaN  \n",
              "..                       ...          ...  \n",
              "564                  0.07115          NaN  \n",
              "565                  0.06637          NaN  \n",
              "566                  0.07820          NaN  \n",
              "567                  0.12400          NaN  \n",
              "568                  0.07039          NaN  \n",
              "\n",
              "[569 rows x 33 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ba499337-0dd1-4d45-b094-97260e04098a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "      <th>Unnamed: 32</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>842302</td>\n",
              "      <td>M</td>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.30010</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>...</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.16220</td>\n",
              "      <td>0.66560</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>842517</td>\n",
              "      <td>M</td>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.08690</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>...</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.12380</td>\n",
              "      <td>0.18660</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>84300903</td>\n",
              "      <td>M</td>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.19740</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>...</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.14440</td>\n",
              "      <td>0.42450</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>84348301</td>\n",
              "      <td>M</td>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.24140</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>...</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.20980</td>\n",
              "      <td>0.86630</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>84358402</td>\n",
              "      <td>M</td>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.19800</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>...</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.13740</td>\n",
              "      <td>0.20500</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>564</th>\n",
              "      <td>926424</td>\n",
              "      <td>M</td>\n",
              "      <td>21.56</td>\n",
              "      <td>22.39</td>\n",
              "      <td>142.00</td>\n",
              "      <td>1479.0</td>\n",
              "      <td>0.11100</td>\n",
              "      <td>0.11590</td>\n",
              "      <td>0.24390</td>\n",
              "      <td>0.13890</td>\n",
              "      <td>...</td>\n",
              "      <td>26.40</td>\n",
              "      <td>166.10</td>\n",
              "      <td>2027.0</td>\n",
              "      <td>0.14100</td>\n",
              "      <td>0.21130</td>\n",
              "      <td>0.4107</td>\n",
              "      <td>0.2216</td>\n",
              "      <td>0.2060</td>\n",
              "      <td>0.07115</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>565</th>\n",
              "      <td>926682</td>\n",
              "      <td>M</td>\n",
              "      <td>20.13</td>\n",
              "      <td>28.25</td>\n",
              "      <td>131.20</td>\n",
              "      <td>1261.0</td>\n",
              "      <td>0.09780</td>\n",
              "      <td>0.10340</td>\n",
              "      <td>0.14400</td>\n",
              "      <td>0.09791</td>\n",
              "      <td>...</td>\n",
              "      <td>38.25</td>\n",
              "      <td>155.00</td>\n",
              "      <td>1731.0</td>\n",
              "      <td>0.11660</td>\n",
              "      <td>0.19220</td>\n",
              "      <td>0.3215</td>\n",
              "      <td>0.1628</td>\n",
              "      <td>0.2572</td>\n",
              "      <td>0.06637</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>566</th>\n",
              "      <td>926954</td>\n",
              "      <td>M</td>\n",
              "      <td>16.60</td>\n",
              "      <td>28.08</td>\n",
              "      <td>108.30</td>\n",
              "      <td>858.1</td>\n",
              "      <td>0.08455</td>\n",
              "      <td>0.10230</td>\n",
              "      <td>0.09251</td>\n",
              "      <td>0.05302</td>\n",
              "      <td>...</td>\n",
              "      <td>34.12</td>\n",
              "      <td>126.70</td>\n",
              "      <td>1124.0</td>\n",
              "      <td>0.11390</td>\n",
              "      <td>0.30940</td>\n",
              "      <td>0.3403</td>\n",
              "      <td>0.1418</td>\n",
              "      <td>0.2218</td>\n",
              "      <td>0.07820</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>567</th>\n",
              "      <td>927241</td>\n",
              "      <td>M</td>\n",
              "      <td>20.60</td>\n",
              "      <td>29.33</td>\n",
              "      <td>140.10</td>\n",
              "      <td>1265.0</td>\n",
              "      <td>0.11780</td>\n",
              "      <td>0.27700</td>\n",
              "      <td>0.35140</td>\n",
              "      <td>0.15200</td>\n",
              "      <td>...</td>\n",
              "      <td>39.42</td>\n",
              "      <td>184.60</td>\n",
              "      <td>1821.0</td>\n",
              "      <td>0.16500</td>\n",
              "      <td>0.86810</td>\n",
              "      <td>0.9387</td>\n",
              "      <td>0.2650</td>\n",
              "      <td>0.4087</td>\n",
              "      <td>0.12400</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>568</th>\n",
              "      <td>92751</td>\n",
              "      <td>B</td>\n",
              "      <td>7.76</td>\n",
              "      <td>24.54</td>\n",
              "      <td>47.92</td>\n",
              "      <td>181.0</td>\n",
              "      <td>0.05263</td>\n",
              "      <td>0.04362</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>...</td>\n",
              "      <td>30.37</td>\n",
              "      <td>59.16</td>\n",
              "      <td>268.6</td>\n",
              "      <td>0.08996</td>\n",
              "      <td>0.06444</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.0000</td>\n",
              "      <td>0.2871</td>\n",
              "      <td>0.07039</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>569 rows × 33 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba499337-0dd1-4d45-b094-97260e04098a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ba499337-0dd1-4d45-b094-97260e04098a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ba499337-0dd1-4d45-b094-97260e04098a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-814465d8-3d44-41aa-ba54-64348e69cf18\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-814465d8-3d44-41aa-ba54-64348e69cf18')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-814465d8-3d44-41aa-ba54-64348e69cf18 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_453a71cb-083f-446a-8fa6-83b82990ca19\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_453a71cb-083f-446a-8fa6-83b82990ca19 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 131
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U7aFwVVdLZH0",
        "outputId": "453fea06-531d-4e88-a57f-2fbfff0980d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 569 entries, 0 to 568\n",
            "Data columns (total 33 columns):\n",
            " #   Column                   Non-Null Count  Dtype  \n",
            "---  ------                   --------------  -----  \n",
            " 0   id                       569 non-null    int64  \n",
            " 1   diagnosis                569 non-null    object \n",
            " 2   radius_mean              569 non-null    float64\n",
            " 3   texture_mean             569 non-null    float64\n",
            " 4   perimeter_mean           569 non-null    float64\n",
            " 5   area_mean                569 non-null    float64\n",
            " 6   smoothness_mean          569 non-null    float64\n",
            " 7   compactness_mean         569 non-null    float64\n",
            " 8   concavity_mean           569 non-null    float64\n",
            " 9   concave points_mean      569 non-null    float64\n",
            " 10  symmetry_mean            569 non-null    float64\n",
            " 11  fractal_dimension_mean   569 non-null    float64\n",
            " 12  radius_se                569 non-null    float64\n",
            " 13  texture_se               569 non-null    float64\n",
            " 14  perimeter_se             569 non-null    float64\n",
            " 15  area_se                  569 non-null    float64\n",
            " 16  smoothness_se            569 non-null    float64\n",
            " 17  compactness_se           569 non-null    float64\n",
            " 18  concavity_se             569 non-null    float64\n",
            " 19  concave points_se        569 non-null    float64\n",
            " 20  symmetry_se              569 non-null    float64\n",
            " 21  fractal_dimension_se     569 non-null    float64\n",
            " 22  radius_worst             569 non-null    float64\n",
            " 23  texture_worst            569 non-null    float64\n",
            " 24  perimeter_worst          569 non-null    float64\n",
            " 25  area_worst               569 non-null    float64\n",
            " 26  smoothness_worst         569 non-null    float64\n",
            " 27  compactness_worst        569 non-null    float64\n",
            " 28  concavity_worst          569 non-null    float64\n",
            " 29  concave points_worst     569 non-null    float64\n",
            " 30  symmetry_worst           569 non-null    float64\n",
            " 31  fractal_dimension_worst  569 non-null    float64\n",
            " 32  Unnamed: 32              0 non-null      float64\n",
            "dtypes: float64(31), int64(1), object(1)\n",
            "memory usage: 146.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 367
        },
        "id": "j9qM9_kiLdnD",
        "outputId": "8e1795ab-1f9d-4140-9fdc-39a35ae5dd52"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 id  radius_mean  texture_mean  perimeter_mean    area_mean  \\\n",
              "count  5.690000e+02   569.000000    569.000000      569.000000   569.000000   \n",
              "mean   3.037183e+07    14.127292     19.289649       91.969033   654.889104   \n",
              "std    1.250206e+08     3.524049      4.301036       24.298981   351.914129   \n",
              "min    8.670000e+03     6.981000      9.710000       43.790000   143.500000   \n",
              "25%    8.692180e+05    11.700000     16.170000       75.170000   420.300000   \n",
              "50%    9.060240e+05    13.370000     18.840000       86.240000   551.100000   \n",
              "75%    8.813129e+06    15.780000     21.800000      104.100000   782.700000   \n",
              "max    9.113205e+08    28.110000     39.280000      188.500000  2501.000000   \n",
              "\n",
              "       smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
              "count       569.000000        569.000000      569.000000           569.000000   \n",
              "mean          0.096360          0.104341        0.088799             0.048919   \n",
              "std           0.014064          0.052813        0.079720             0.038803   \n",
              "min           0.052630          0.019380        0.000000             0.000000   \n",
              "25%           0.086370          0.064920        0.029560             0.020310   \n",
              "50%           0.095870          0.092630        0.061540             0.033500   \n",
              "75%           0.105300          0.130400        0.130700             0.074000   \n",
              "max           0.163400          0.345400        0.426800             0.201200   \n",
              "\n",
              "       symmetry_mean  ...  texture_worst  perimeter_worst   area_worst  \\\n",
              "count     569.000000  ...     569.000000       569.000000   569.000000   \n",
              "mean        0.181162  ...      25.677223       107.261213   880.583128   \n",
              "std         0.027414  ...       6.146258        33.602542   569.356993   \n",
              "min         0.106000  ...      12.020000        50.410000   185.200000   \n",
              "25%         0.161900  ...      21.080000        84.110000   515.300000   \n",
              "50%         0.179200  ...      25.410000        97.660000   686.500000   \n",
              "75%         0.195700  ...      29.720000       125.400000  1084.000000   \n",
              "max         0.304000  ...      49.540000       251.200000  4254.000000   \n",
              "\n",
              "       smoothness_worst  compactness_worst  concavity_worst  \\\n",
              "count        569.000000         569.000000       569.000000   \n",
              "mean           0.132369           0.254265         0.272188   \n",
              "std            0.022832           0.157336         0.208624   \n",
              "min            0.071170           0.027290         0.000000   \n",
              "25%            0.116600           0.147200         0.114500   \n",
              "50%            0.131300           0.211900         0.226700   \n",
              "75%            0.146000           0.339100         0.382900   \n",
              "max            0.222600           1.058000         1.252000   \n",
              "\n",
              "       concave points_worst  symmetry_worst  fractal_dimension_worst  \\\n",
              "count            569.000000      569.000000               569.000000   \n",
              "mean               0.114606        0.290076                 0.083946   \n",
              "std                0.065732        0.061867                 0.018061   \n",
              "min                0.000000        0.156500                 0.055040   \n",
              "25%                0.064930        0.250400                 0.071460   \n",
              "50%                0.099930        0.282200                 0.080040   \n",
              "75%                0.161400        0.317900                 0.092080   \n",
              "max                0.291000        0.663800                 0.207500   \n",
              "\n",
              "       Unnamed: 32  \n",
              "count          0.0  \n",
              "mean           NaN  \n",
              "std            NaN  \n",
              "min            NaN  \n",
              "25%            NaN  \n",
              "50%            NaN  \n",
              "75%            NaN  \n",
              "max            NaN  \n",
              "\n",
              "[8 rows x 32 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4e0d99e1-c4b2-44a6-b7cb-6e4fae08fb1d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>symmetry_mean</th>\n",
              "      <th>...</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "      <th>Unnamed: 32</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>5.690000e+02</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>569.000000</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.037183e+07</td>\n",
              "      <td>14.127292</td>\n",
              "      <td>19.289649</td>\n",
              "      <td>91.969033</td>\n",
              "      <td>654.889104</td>\n",
              "      <td>0.096360</td>\n",
              "      <td>0.104341</td>\n",
              "      <td>0.088799</td>\n",
              "      <td>0.048919</td>\n",
              "      <td>0.181162</td>\n",
              "      <td>...</td>\n",
              "      <td>25.677223</td>\n",
              "      <td>107.261213</td>\n",
              "      <td>880.583128</td>\n",
              "      <td>0.132369</td>\n",
              "      <td>0.254265</td>\n",
              "      <td>0.272188</td>\n",
              "      <td>0.114606</td>\n",
              "      <td>0.290076</td>\n",
              "      <td>0.083946</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.250206e+08</td>\n",
              "      <td>3.524049</td>\n",
              "      <td>4.301036</td>\n",
              "      <td>24.298981</td>\n",
              "      <td>351.914129</td>\n",
              "      <td>0.014064</td>\n",
              "      <td>0.052813</td>\n",
              "      <td>0.079720</td>\n",
              "      <td>0.038803</td>\n",
              "      <td>0.027414</td>\n",
              "      <td>...</td>\n",
              "      <td>6.146258</td>\n",
              "      <td>33.602542</td>\n",
              "      <td>569.356993</td>\n",
              "      <td>0.022832</td>\n",
              "      <td>0.157336</td>\n",
              "      <td>0.208624</td>\n",
              "      <td>0.065732</td>\n",
              "      <td>0.061867</td>\n",
              "      <td>0.018061</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>8.670000e+03</td>\n",
              "      <td>6.981000</td>\n",
              "      <td>9.710000</td>\n",
              "      <td>43.790000</td>\n",
              "      <td>143.500000</td>\n",
              "      <td>0.052630</td>\n",
              "      <td>0.019380</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.106000</td>\n",
              "      <td>...</td>\n",
              "      <td>12.020000</td>\n",
              "      <td>50.410000</td>\n",
              "      <td>185.200000</td>\n",
              "      <td>0.071170</td>\n",
              "      <td>0.027290</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.156500</td>\n",
              "      <td>0.055040</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>8.692180e+05</td>\n",
              "      <td>11.700000</td>\n",
              "      <td>16.170000</td>\n",
              "      <td>75.170000</td>\n",
              "      <td>420.300000</td>\n",
              "      <td>0.086370</td>\n",
              "      <td>0.064920</td>\n",
              "      <td>0.029560</td>\n",
              "      <td>0.020310</td>\n",
              "      <td>0.161900</td>\n",
              "      <td>...</td>\n",
              "      <td>21.080000</td>\n",
              "      <td>84.110000</td>\n",
              "      <td>515.300000</td>\n",
              "      <td>0.116600</td>\n",
              "      <td>0.147200</td>\n",
              "      <td>0.114500</td>\n",
              "      <td>0.064930</td>\n",
              "      <td>0.250400</td>\n",
              "      <td>0.071460</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>9.060240e+05</td>\n",
              "      <td>13.370000</td>\n",
              "      <td>18.840000</td>\n",
              "      <td>86.240000</td>\n",
              "      <td>551.100000</td>\n",
              "      <td>0.095870</td>\n",
              "      <td>0.092630</td>\n",
              "      <td>0.061540</td>\n",
              "      <td>0.033500</td>\n",
              "      <td>0.179200</td>\n",
              "      <td>...</td>\n",
              "      <td>25.410000</td>\n",
              "      <td>97.660000</td>\n",
              "      <td>686.500000</td>\n",
              "      <td>0.131300</td>\n",
              "      <td>0.211900</td>\n",
              "      <td>0.226700</td>\n",
              "      <td>0.099930</td>\n",
              "      <td>0.282200</td>\n",
              "      <td>0.080040</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.813129e+06</td>\n",
              "      <td>15.780000</td>\n",
              "      <td>21.800000</td>\n",
              "      <td>104.100000</td>\n",
              "      <td>782.700000</td>\n",
              "      <td>0.105300</td>\n",
              "      <td>0.130400</td>\n",
              "      <td>0.130700</td>\n",
              "      <td>0.074000</td>\n",
              "      <td>0.195700</td>\n",
              "      <td>...</td>\n",
              "      <td>29.720000</td>\n",
              "      <td>125.400000</td>\n",
              "      <td>1084.000000</td>\n",
              "      <td>0.146000</td>\n",
              "      <td>0.339100</td>\n",
              "      <td>0.382900</td>\n",
              "      <td>0.161400</td>\n",
              "      <td>0.317900</td>\n",
              "      <td>0.092080</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.113205e+08</td>\n",
              "      <td>28.110000</td>\n",
              "      <td>39.280000</td>\n",
              "      <td>188.500000</td>\n",
              "      <td>2501.000000</td>\n",
              "      <td>0.163400</td>\n",
              "      <td>0.345400</td>\n",
              "      <td>0.426800</td>\n",
              "      <td>0.201200</td>\n",
              "      <td>0.304000</td>\n",
              "      <td>...</td>\n",
              "      <td>49.540000</td>\n",
              "      <td>251.200000</td>\n",
              "      <td>4254.000000</td>\n",
              "      <td>0.222600</td>\n",
              "      <td>1.058000</td>\n",
              "      <td>1.252000</td>\n",
              "      <td>0.291000</td>\n",
              "      <td>0.663800</td>\n",
              "      <td>0.207500</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 32 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e0d99e1-c4b2-44a6-b7cb-6e4fae08fb1d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4e0d99e1-c4b2-44a6-b7cb-6e4fae08fb1d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4e0d99e1-c4b2-44a6-b7cb-6e4fae08fb1d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-b3678e33-893c-4965-a242-f34fd260752d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3678e33-893c-4965-a242-f34fd260752d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-b3678e33-893c-4965-a242-f34fd260752d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "dZ2qEukbLqJT",
        "outputId": "366a675f-b8a7-4d3e-f328-f7265f620651"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "id                           0\n",
              "diagnosis                    0\n",
              "radius_mean                  0\n",
              "texture_mean                 0\n",
              "perimeter_mean               0\n",
              "area_mean                    0\n",
              "smoothness_mean              0\n",
              "compactness_mean             0\n",
              "concavity_mean               0\n",
              "concave points_mean          0\n",
              "symmetry_mean                0\n",
              "fractal_dimension_mean       0\n",
              "radius_se                    0\n",
              "texture_se                   0\n",
              "perimeter_se                 0\n",
              "area_se                      0\n",
              "smoothness_se                0\n",
              "compactness_se               0\n",
              "concavity_se                 0\n",
              "concave points_se            0\n",
              "symmetry_se                  0\n",
              "fractal_dimension_se         0\n",
              "radius_worst                 0\n",
              "texture_worst                0\n",
              "perimeter_worst              0\n",
              "area_worst                   0\n",
              "smoothness_worst             0\n",
              "compactness_worst            0\n",
              "concavity_worst              0\n",
              "concave points_worst         0\n",
              "symmetry_worst               0\n",
              "fractal_dimension_worst      0\n",
              "Unnamed: 32                569\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diagnosis</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>radius_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>texture_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>perimeter_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>area_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoothness_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>compactness_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>concavity_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>concave points_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>symmetry_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fractal_dimension_mean</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>radius_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>texture_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>perimeter_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>area_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoothness_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>compactness_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>concavity_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>concave points_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>symmetry_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fractal_dimension_se</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>radius_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>texture_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>perimeter_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>area_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoothness_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>compactness_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>concavity_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>concave points_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>symmetry_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Unnamed: 32</th>\n",
              "      <td>569</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sFtRDlL3Ltvz",
        "outputId": "f11bf85c-1295-49a0-f291-c3b2dd3320f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "np.int64(0)"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop unnecessary columns\n",
        "df = df.drop(['id', 'Unnamed: 32'], axis=1)"
      ],
      "metadata": {
        "id": "eOMuRPjmMfq8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.dropna(subset=['diagnosis'])"
      ],
      "metadata": {
        "id": "VVDmghSU33hU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['diagnosis'] = df['diagnosis'].map({'M': 1, 'B': 0})\n",
        "print(\"Missing values:\", df.isnull().sum().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OWAgIFNX38gi",
        "outputId": "23159808-37a1-4845-81eb-109b3ffa382f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Missing values: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['diagnosis'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "SbIiKZHM4a0b",
        "outputId": "d11c8152-6764-40fe-e57b-065b06999a34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "diagnosis\n",
              "0    357\n",
              "1    212\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>diagnosis</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>357</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>212</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "0 - Benign(safe)\n",
        "\n",
        "1 - Malignant(cancerous)"
      ],
      "metadata": {
        "id": "2BQka5ly4e_M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "EDA"
      ],
      "metadata": {
        "id": "8JGvPU0CSH6W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='diagnosis', data=df, palette='Set3')\n",
        "plt.title(\"Malignant vs Benign Count\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "hOlzr-Z3R7il",
        "outputId": "0da77b19-b8db-4503-b790-01cdc80beb6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.heatmap(df.iloc[:,1:11].corr(), annot=True, cmap=\"mako\", fmt=\".2f\")\n",
        "plt.title(\"Correlation Heatmap (Sample Features)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 701
        },
        "id": "eVUWhlV7xwOb",
        "outputId": "6fd2805b-7a7f-4f81-dd9b-92a693244656"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x='diagnosis', y='radius_mean', data=df, palette=\"Set2\")\n",
        "plt.title(\"Radius Mean vs Diagnosis\")\n",
        "plt.show()\n",
        "\n",
        "sns.boxplot(x='diagnosis', y='area_mean', data=df, palette=\"Set1\")\n",
        "plt.title(\"Area Mean vs Diagnosis\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 927
        },
        "id": "MjvV5fLcx83T",
        "outputId": "665b486d-ff47-4b36-d531-a3ac9e0bca60"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjMAAAHHCAYAAABKudlQAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAOS9JREFUeJzt3Xl8zHcC//F3Qg7kEhnHMFVHNNTRYKN+7oqrGke1tM1atHarrmhatl3dFsvq6sqiSrfbFm2jB6uiduu+lqVaohaNq2gqjjgiESSR+f7+8DO/jgTJSMx84/V8PObBfL6fmXlnJLx9v5/vfL0MwzAEAABgUt7uDgAAAHAnKDMAAMDUKDMAAMDUKDMAAMDUKDMAAMDUKDMAAMDUKDMAAMDUKDMAAMDUKDMAAMDUKDOAmx09elReXl6aP3++Y2zChAny8vJyXyiUqML+jMsKvlfhCSgzQCHmz58vLy8vx618+fKqWbOmBg8erOPHj7s7Xqn45de8efPmAtsNw5DNZpOXl5cee+wxNyT0HDd+b4SGhqpFixaKi4vTvn373B0PuOdQZoBbmDRpkj7++GO9++676tGjhz755BN16NBBV65cKdXXfe2113T58uVSfY2b8ff318KFCwuMb9y4UT///LP8/PzckMrzdOnSRR9//LHmzZunSZMmqXnz5lqwYIGaNWumhIQEp7m1a9fW5cuXNXDgQDelLT3u/F4Frivv7gCAJ+vRo4datmwpSRo6dKjCwsL0l7/8RcuWLVP//v1L7XXLly+v8uXd8+P56KOPatGiRZo1a5ZThoULF6pFixY6c+aMW3J5mgYNGujXv/6109ibb76pmJgYvfTSS4qIiNCjjz4q6dqeHH9/f3fELHXu/F4FrmPPDFAM7dq1kyQdPnzYMZabm6vXX39dLVq0UHBwsCpVqqR27dpp/fr1BR6fkZGhwYMHKzg4WCEhIRo0aJAyMjIKzLtxHcKt1lx4eXlpwoQJjvtZWVkaM2aM7r//fvn5+alq1arq0qWLdu7cWaSv8emnn9bZs2e1evVqp69x8eLFeuaZZwp9jN1u14wZM/Tggw/K399f1apV0/PPP6/z5887zUtKSlLPnj1ltVrl5+enevXq6U9/+pPy8/Od5nXs2FGNGzfWvn371KlTJ1WsWFE1a9bUtGnTbpu/cePG6tSpU6EZa9asqSeeeMIx9tlnn6lFixYKDAxUUFCQmjRpopkzZ972NW6mSpUq+uyzz1S+fHlNmTLFMV7Yn9/u3bs1ePBg1a1bV/7+/qpevbqeffZZnT17tsDzbtiwQS1btpS/v7/q1aunv//974WuVfHy8tLIkSO1dOlSNW7cWH5+fnrwwQe1YsWKAs+ZnJysHj16KCgoSAEBAercubO2bdvmNCcvL08TJ05UeHi4/P39VaVKFbVt29bpe6OwHKtXr1bbtm0VEhKigIAAPfDAA/rDH/5QrPcSKA7qNFAMR48elSRVrlzZMZaZman3339fTz/9tH77298qKytLH3zwgbp166bt27froYceknRtzUnv3r21efNmDRs2TA0bNtSXX36pQYMGlWjGYcOGafHixRo5cqQaNWqks2fPavPmzfrhhx/UvHnz2z7+/vvvV+vWrfXpp5+qR48ekqSvv/5aFy5c0FNPPaVZs2YVeMzzzz+v+fPna8iQIRo9erSOHDmi2bNnKzk5WVu2bJGPj4+ka+tyAgICFB8fr4CAAK1bt06vv/66MjMz9dZbbzk95/nz59W9e3c9/vjj6t+/vxYvXqzf//73atKkiSNXYQYMGKAJEybo5MmTql69umN88+bNSktL01NPPSXp2j+4Tz/9tDp37qy//OUvkqQffvhBW7ZsUVxc3G3fp5u577771KFDB61fv16ZmZkKCgoqdN7q1av1448/asiQIapevbr27t2r9957T3v37tW2bdscBSE5OVndu3dXjRo1NHHiROXn52vSpEmyWCyFPu/mzZu1ZMkSDR8+XIGBgZo1a5b69eunn376SVWqVJEk7d27V+3atVNQUJDGjRsnHx8f/f3vf1fHjh21ceNGtWrVStK1ojJ16lQNHTpUUVFRyszM1HfffaedO3eqS5cuhb7+3r179dhjj6lp06aaNGmS/Pz8dOjQIW3ZssXl9xS4LQNAAfPmzTMkGWvWrDHS09ON1NRUY/HixYbFYjH8/PyM1NRUx9yrV68aOTk5To8/f/68Ua1aNePZZ591jC1dutSQZEybNs3pse3atTMkGfPmzXOMv/HGG8YvfzyPHDlSYM51kow33njDcT84ONgYMWKEy1/zt99+a8yePdsIDAw0Ll26ZBiGYTz55JNGp06dDMMwjNq1axs9e/Z0PO4///mPIclITEx0er4VK1YUGL/+fL/0/PPPGxUrVjSuXLniGOvQoYMhyfjoo48cYzk5OUb16tWNfv363fLr2L9/vyHJePvtt53Ghw8fbgQEBDgyxMXFGUFBQcbVq1dv+XyFkXTL9zguLs6QZHz//feGYRT+51fYe/Hpp58akoxNmzY5xmJiYoyKFSsax48fd4wdPHjQKF++vHHjX+GSDF9fX+PQoUOOse+//77A+9GnTx/D19fXOHz4sGMsLS3NCAwMNNq3b+8Ya9asmdOfdWFu/F7929/+Zkgy0tPTb/k4oCRxmAm4hejoaFksFtlsNj3xxBOqVKmSli1bplq1ajnmlCtXTr6+vpKuHco4d+6crl69qpYtWzod2vn3v/+t8uXL64UXXnB67KhRo0o0c0hIiL755hulpaW5/Bz9+/fX5cuXtXz5cmVlZWn58uU3PcS0aNEiBQcHq0uXLjpz5ozj1qJFCwUEBDgdbqtQoYLj91lZWTpz5ozatWunS5cuKSUlxel5AwICnNak+Pr6KioqSj/++OMtszdo0EAPPfSQPv/8c8dYfn6+Fi9erJiYGEeGkJAQZWdnOx0yKSkBAQGSrn2NN/PL9+LKlSs6c+aMHn74YUlyfN/k5+drzZo16tOnj6xWq2N+/fr1b7p3Kjo6WvXq1XPcb9q0qYKCghzvW35+vlatWqU+ffqobt26jnk1atTQM888o82bNyszM1PStfdo7969OnjwYJG/9pCQEEnXDina7fYiPw64E5QZ4BbeeecdrV69WosXL9ajjz6qM2fOFHo2z4IFC9S0aVPHugKLxaJ//etfunDhgmPOsWPHVKNGDcc/dNc98MADJZp52rRp2rNnj2w2m6KiojRhwoTbFoAbWSwWRUdHa+HChVqyZIny8/Od1pr80sGDB3XhwgVVrVpVFovF6Xbx4kWdPn3aMXfv3r3q27evgoODFRQUJIvF4igsv3yvJKlWrVoF1mJUrly5wDqcwgwYMEBbtmxxnEa/YcMGnT59WgMGDHDMGT58uBo0aKAePXqoVq1aevbZZwtdW+KKixcvSpICAwNvOufcuXOKi4tTtWrVVKFCBVksFtWpU0fS/38vTp8+rcuXL6t+/foFHl/YmHTtMNeNfvm+paen69KlS4V+3zVs2FB2u12pqamSrp3Nl5GRoQYNGqhJkyYaO3asdu/efasvXQMGDFCbNm00dOhQVatWTU899ZS++OILig1KFWUGuIWoqChFR0erX79+WrZsmRo3bqxnnnnG8Y+VJH3yyScaPHiw6tWrpw8++EArVqzQ6tWr9cgjj5TYX+A3+1CyGxfOStf2qvz44496++23ZbVa9dZbb+nBBx/U119/XazXfOaZZ/T11187Tku//j/uG9ntdlWtWlWrV68u9DZp0iRJ1xY/d+jQQd9//70mTZqkr776SqtXr3asV7nxvSpXrlyhr2cYxm2zDxgwQIZhaNGiRZKkL774QsHBwerevbtjTtWqVbVr1y4tW7ZMvXr10vr169WjR48SWcO0Z88elStXzlFOCtO/f3/94x//0LBhw7RkyRKtWrXKUabu5PvmTt63G7Vv316HDx/Whx9+qMaNG+v9999X8+bN9f7779/0MRUqVNCmTZu0Zs0aDRw4ULt379aAAQPUpUuXQr9fgZJAmQGKqFy5cpo6darS0tI0e/Zsx/jixYtVt25dLVmyRAMHDlS3bt0UHR1d4LNoateurRMnTjgVIUnav3//bV/7+oLjG898OnbsWKHza9SooeHDh2vp0qU6cuSIqlSp4nR2TVH07dtX3t7e2rZt200PMUlSvXr1dPbsWbVp00bR0dEFbs2aNZN0be/I2bNnNX/+fMXFxemxxx5TdHS002LqklKnTh1FRUXp888/19WrV7VkyRL16dOnwF41X19fxcTEaM6cOTp8+LCef/55ffTRRzp06JDLr/3TTz9p48aNat269U33zJw/f15r167VK6+8ookTJ6pv377q0qWL02Ef6Vrh8vf3LzSPqxktFosqVqxY6PddSkqKvL29ZbPZHGOhoaEaMmSIPv30U6Wmpqpp06ZOZ88VxtvbW507d1ZCQoL27dunKVOmaN26dYWe4QeUBMoMUAwdO3ZUVFSUZsyY4Sgr1/8n/Mv/+X7zzTfaunWr02MfffRRXb16VXPnznWM5efn6+23377t6wYFBSksLEybNm1yGp8zZ47T/fz8/AKHa6pWrSqr1aqcnJwifIX/X0BAgObOnasJEyYoJibmpvP69++v/Px8/elPfyqw7erVq44CVtj7lJubW+BrKCkDBgzQtm3b9OGHH+rMmTNOh5gkFTgF2tvbW02bNpWkYr9X1507d05PP/208vPzNX78+JvOK+y9kKQZM2YUmBcdHa2lS5c6rYE6dOhQsfe0/fI5u3btqqSkJMfZeZJ06tQpLVy4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AwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATI0yAwAATM2tZWbq1Kn61a9+pcDAQFWtWlV9+vTR/v37neZcuXJFI0aMUJUqVRQQEKB+/frp1KlTbkoMAAA8jVvLzMaNGzVixAht27ZNq1evVl5enrp27ars7GzHnBdffFFfffWVFi1apI0bNyotLU2PP/64G1MDAABPUt7VB9rtdh06dEinT5+W3W532ta+ffsiPceKFSuc7s+fP19Vq1bVjh071L59e124cEEffPCBFi5cqEceeUSSNG/ePDVs2FDbtm3Tww8/7Gp8AABQRrhUZrZt26ZnnnlGx44dk2EYTtu8vLyUn5/vUpgLFy5IkkJDQyVJO3bsUF5enqKjox1zIiIidN9992nr1q2FlpmcnBzl5OQ47mdmZrqUBQAAmINLh5mGDRumli1bas+ePTp37pzOnz/vuJ07d86lIHa7XWPGjFGbNm3UuHFjSdLJkyfl6+urkJAQp7nVqlXTyZMnC32eqVOnKjg42HGz2Wwu5QEAAObg0p6ZgwcPavHixapfv36JBRkxYoT27NmjzZs339HzvPrqq4qPj3fcz8zMpNAAAFCGubRnplWrVjp06FCJhRg5cqSWL1+u9evXq1atWo7x6tWrKzc3VxkZGU7zT506perVqxf6XH5+fgoKCnK6AQCAssulPTOjRo3SSy+9pJMnT6pJkyby8fFx2t60adMiPY9hGBo1apS+/PJLbdiwQXXq1HHa3qJFC/n4+Gjt2rXq16+fJGn//v366aef1Lp1a1eiAwCAMsalMnO9WDz77LOOMS8vLxmGUawFwCNGjNDChQuVlJSkwMBAxzqY4OBgVahQQcHBwXruuecUHx+v0NBQBQUFadSoUWrdujVnMgEAAEkulpkjR46UyIvPnTtXktSxY0en8Xnz5mnw4MGSpL/97W/y9vZWv379lJOTo27dumnOnDkl8voAUBRnzpxRVlaWu2Pc844fP+70K9wrMDBQYWFh7o4hSfIybjy3uozJzMxUcHCwLly4wPoZAMV25swZvfzSS8rNy3N3FMCj+Pr46K/Tp5daoSnOv98uf2ieJO3bt08//fSTcnNzncZ79ep1J08LAB4jKytLuXl5+vUDoapW8Y7+ygTKjFOXruqT/eeUlZXlEXtnXPrJ/PHHH9W3b1/973//c6yVka6tm5Hk8ofmAYCnqlaxvGwBvu6OAaAQLp2aHRcXpzp16uj06dOqWLGi9u7dq02bNqlly5basGFDCUcEAAC4OZf2zGzdulXr1q1TWFiYvL295e3trbZt22rq1KkaPXq0kpOTSzonAABAoVzaM5Ofn6/AwEBJUlhYmNLS0iRJtWvX1v79+0suHQAAwG24tGemcePG+v7771WnTh21atVK06ZNk6+vr9577z3VrVu3pDMCAADclEtl5rXXXlN2drYkadKkSXrsscfUrl07ValSRZ9//nmJBgQAALgVl8pMt27dHL+vX7++UlJSdO7cOVWuXNlxRhMAAMDd4NKamesOHTqklStX6vLlywoNDS2pTAAAAEXmUpk5e/asOnfurAYNGujRRx/ViRMnJEnPPfecXnrppRINCAAAcCsulZkXX3xRPj4++umnn1SxYkXH+IABA7RixYoSCwcAAHA7Lq2ZWbVqlVauXKlatWo5jYeHh+vYsWMlEgwAAKAoXNozk52d7bRH5rpz587Jz8/vjkMBAAAUlUtlpl27dvroo48c9728vGS32zVt2jR16tSpxMIBAADcjkuHmaZNm6bOnTvru+++U25ursaNG6e9e/fq3Llz2rJlS0lnBAAAuCmX9sw0btxYBw4cUNu2bdW7d29lZ2fr8ccfV3JysurVq1fSGQEAAG7KpT0zkhQcHKzx48eXZBYAAIBic7nMXLlyRbt379bp06dlt9udtvXq1euOgwEAABSFS2Vm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jlEsNptNJ06cUFhYmLujALgNygyAUmexWNwdodjKlSvHFdcBk+AwE4A7lp2drd/85jcKCAhQjRo1NH36dKftNx5mSkhIUJMmTVSpUiXZbDYNHz5cFy9edHrMP/7xD9lsNlWsWFF9+/ZVQkKCQkJCHNsnTJighx56SB9//LHuv/9+BQcH66mnnlJWVpZjTk5OjkaPHq2qVavK399fbdu21bfffuvYfv78ecXGxspisahChQoKDw/XvHnzJBU8zHSruQDcizID4I6NHTtWGzduVFJSklatWqUNGzZo586dN53v7e2tWbNmae/evVqwYIHWrVuncePGObZv2bJFw4YNU1xcnHbt2qUuXbpoypQpBZ7n8OHDWrp0qZYvX67ly5dr48aNevPNNx3bx40bp3/+859asGCBdu7cqfr166tbt246d+6cJOmPf/yj9u3bp6+//lo//PCD5s6de9PDSsWZC+AuMwDgDmRlZRm+vr7GF1984Rg7e/asUaFCBSMuLs4wDMOoXbu28be//e2mz7Fo0SKjSpUqjvsDBgwwevbs6TQnNjbWCA4Odtx/4403jIoVKxqZmZmOsbFjxxqtWrUyDMMwLl68aPj4+BiJiYmO7bm5uYbVajWmTZtmGIZhxMTEGEOGDCk005EjRwxJRnJy8m3nAnAv9swAuCOHDx9Wbm6uWrVq5RgLDQ3VAw88cNPHrFmzRp07d1bNmjUVGBiogQMH6uzZs7p06ZIkaf/+/YqKinJ6zI33pWuHrwIDAx33a9SoodOnTzty5eXlqU2bNo7tPj4+ioqK0g8//CBJeuGFF/TZZ5/poYce0rhx4/Tf//73ppmLMxfA3UWZAXBXHT16VI899piaNm2qf/7zn9qxY4feeecdSVJubm6xnsvHx8fpvpeXl+x2e5Ef36NHDx07dkwvvvii0tLS1LlzZ7388st3PBfA3UWZAXBH6tWrJx8fH33zzTeOsfPnz+vAgQOFzt+xY4fsdrumT5+uhx9+WA0aNFBaWprTnAceeMBpoa6kAveLksvX11dbtmxxjOXl5enbb79Vo0aNHGMWi0WDBg3SJ598ohkzZui999676XMWZy6Au4dTswHckYCAAD333HMaO3asqlSpoqpVq2r8+PHy9i78/0r169dXXl6e3n77bcXExGjLli169913neaMGjVK7du3V0JCgmJiYrRu3Tp9/fXX8vLyKnKuSpUq6YUXXtDYsWMVGhqq++67T9OmTdOlS5f03HPPSZJef/11tWjRQg8++KBycnK0fPlyNWzYsNDnK85cAHcXe2YA3LG33npL7dq1U0xMjKKjo9W2bVu1aNGi0LnNmjVTQkKC/vKXv6hx48ZKTEzU1KlTnea0adNG7777rhISEtSsWTOtWLFCL774ovz9/YuV680331S/fv00cOBANW/eXIcOHdLKlStVuXJlSZKvr69effVVNW3aVO3bt1e5cuX02WefFfpcxZkL4O7yMgzDcHcIALid3/72t0pJSdF//vMfd0cB4GE4zATAI/31r39Vly5dVKlSJX399ddasGCB5syZ4+5YADwQe2YAeKT+/ftrw4YNysrKUt26dTVq1CgNGzbM3bEAeCDKDAAAMDUWAAMAAFOjzAAAAFOjzAAAAFOjzAAAAFOjzAAAAFOjzAAAAFOjzAAAAFOjzAAAAFOjzAAAAFP7v60iKy0hBunfAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Features* & Target"
      ],
      "metadata": {
        "id": "XddlG0jO2azj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop('diagnosis', axis=1)\n",
        "y = df['diagnosis']"
      ],
      "metadata": {
        "id": "PNLgW8st0Swr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Scale features"
      ],
      "metadata": {
        "id": "-pKcPzyQ2mqT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)"
      ],
      "metadata": {
        "id": "CCIxYBBt2jRq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train-test split"
      ],
      "metadata": {
        "id": "oV9G8PZg2rdT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "print(\"Train size:\", X_train.shape, \" Test size:\", X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K11af6RU2q1a",
        "outputId": "add588ed-b3f7-4514-c51f-e373538f4cf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train size: (455, 30)  Test size: (114, 30)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model Training"
      ],
      "metadata": {
        "id": "c_-QfzBE2-BD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Logistic Regression"
      ],
      "metadata": {
        "id": "jOd5AeVd2_XC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "log_reg = LogisticRegression(max_iter=5000)\n",
        "log_reg.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "pNJxuS1j24Vi",
        "outputId": "e21d290e-b546-4f66-ca1c-865f2d830b55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(max_iter=5000)"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-5 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-5 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-5 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-5 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-5 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=5000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(max_iter=5000)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_log = log_reg.predict(X_test)"
      ],
      "metadata": {
        "id": "188wORpv5ZCS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nLogistic Regression Results\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_log))\n",
        "print(classification_report(y_test, y_pred_log))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Gnq1upe5c4y",
        "outputId": "ed8613fb-e0e8-418f-8353-9436e9e7e4f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Logistic Regression Results\n",
            "Accuracy: 0.9736842105263158\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.99      0.98        71\n",
            "           1       0.98      0.95      0.96        43\n",
            "\n",
            "    accuracy                           0.97       114\n",
            "   macro avg       0.97      0.97      0.97       114\n",
            "weighted avg       0.97      0.97      0.97       114\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "SVM"
      ],
      "metadata": {
        "id": "pUtH43bK55O7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svm = SVC(kernel='linear')\n",
        "svm.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "eCerOgjd59Cr",
        "outputId": "c5a5aa94-0b05-4658-9159-6fb2fbbf56b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(kernel='linear')"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-6 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-6 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-6 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-6 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-6 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_svm = svm.predict(X_test)"
      ],
      "metadata": {
        "id": "Vtn103wV6Cna"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\nSVM Results\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_svm))\n",
        "print(classification_report(y_test, y_pred_svm))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E2M9aYfK6GRb",
        "outputId": "0ea2c7ab-4340-4b72-ecd8-fe1cee6f2896"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "SVM Results\n",
            "Accuracy: 0.956140350877193\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.96      0.96        71\n",
            "           1       0.93      0.95      0.94        43\n",
            "\n",
            "    accuracy                           0.96       114\n",
            "   macro avg       0.95      0.96      0.95       114\n",
            "weighted avg       0.96      0.96      0.96       114\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Predictive System"
      ],
      "metadata": {
        "id": "fb3Iwy3X6PJL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sample = np.array([[17.99, 10.38, 122.8, 1001, 0.118, 0.277, 0.3, 0.147, 0.241, 0.078,1.095, 0.905, 8.59, 153.4, 0.006, 0.04, 0.053, 0.015, 0.03, 0.006,25.38, 17.33, 184.6, 2019, 0.162, 0.666, 0.712, 0.265, 0.46, 0.119]])\n",
        "\n",
        "sample_scaled = scaler.transform(sample)\n",
        "prediction = svm.predict(sample_scaled)[0]\n",
        "\n",
        "if prediction == 1:\n",
        "    print(\"The tumor is Malignant (Cancerous)\")\n",
        "else:\n",
        "    print(\"The tumor is Benign (Non-Cancerous)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fbff9YIq6P-j",
        "outputId": "156ec103-6c31-4190-fb85-06a68f3a2cbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The tumor is Malignant (Cancerous)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample = np.array([[17.99, 10.38, 122.8, 1001, 0.118, 0.277, 0.3, 0.147, 0.241, 0.078,1.095, 0.905, 8.59, 153.4, 0.006, 0.04, 0.053, 0.015, 0.03, 0.006,25.38, 17.33, 184.6, 2019, 0.162, 0.666, 0.712, 0.265, 0.46, 0.119]])\n",
        "\n",
        "sample_scaled = scaler.transform(sample)\n",
        "prediction = log_reg.predict(sample_scaled)[0]\n",
        "\n",
        "if prediction == 1:\n",
        "    print(\"The tumor is Malignant (Cancerous)\")\n",
        "else:\n",
        "    print(\"The tumor is Benign (Non-Cancerous)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2YqHZNYa9kWT",
        "outputId": "5c096d5b-fc65-4201-8912-1fbe69b8e6a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The tumor is Malignant (Cancerous)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample1 = np.array([[7.76, 24.54, 47.92, 181.0, 0.05263, 0.04362, 0.0, 0.0, 0.2871, 0.07039,0.2163, 0.6427, 1.632, 17.33, 0.0051, 0.01332, 0.01464, 0.00796, 0.02021, 0.00226,8.219, 33.37, 55.55, 224.2, 0.08336, 0.08196, 0.0, 0.0, 0.3135, 0.08599]])\n",
        "sample_scaled = scaler.transform(sample)\n",
        "prediction = svm.predict(sample_scaled)[0]\n",
        "\n",
        "if prediction == 1:\n",
        "    print(\"The tumor is Malignant (Cancerous)\")\n",
        "else:\n",
        "    print(\"The tumor is Benign (Non-Cancerous)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dg6UVe0OAX4b",
        "outputId": "3ffd7c8e-99b5-4d61-fed7-0bfec20ca197"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The tumor is Benign (Non-Cancerous)\n"
          ]
        }
      ]
    }
  ]
}
